

AutoMap

A specialized dictionary where keys are the only thing that matters

A key points to an integer; we want constant time lookup from a key to its ordered position.

Original AutoMap:

    Took arbitrary iterables and loaded them into an internally managed List
    The "hash table" is an array of structs, where each item is a pair of hash code, index into keys list of key position

    Hashing used PyObject_Hash
    Comparison to other objects used PyObject_RichCompareBool








Limitations:

    Floats of less then 64 bit are sometimes not recoverable.

    >>> import numpy as np
    >>> a1 = np.array((2.3, 5.4), dtype=np.float32)
    >>> d = {k: v for v, k in enumerate(a1)}
    >>> d
    {2.3: 0, 5.4: 1}
    >>> d[5.4]
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    KeyError: 5.4
    >>> d[a1[1]]
    1
    >>> d[a1[0]]
    0
    >>> d[2.3]
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    KeyError: 2.3

    >>> from automap import AutoMap
    >>> am = AutoMap(a1)
    >>> am
    automap.AutoMap([2.299999952316284, 5.400000095367432])
    >>> am[a1[1]]
    1
    >>> am[a1[0]]
    0


Can try to use the following:

https://numpy.org/doc/stable/reference/c-api/array.html#c.PyArray_ScalarAsCtype

PyArray_ScalarAsCtype
PyArray_CastScalarToCtype


The C-names for these types are Py{TYPE}ArrType_Type where {TYPE} can be

    Bool, Byte, Short, Int, Long, LongLong, UByte, UShort, UInt, ULong, ULongLong, Half, Float, Double, LongDouble, CFloat, CDouble, CLongDouble, String, Unicode, Void, and Object.


These type names are part of the C-API and can therefore be created in extension C-code. There is also a PyIntpArrType_Type and a PyUIntpArrType_Type that are simple substitutes for one of the integer types that can hold a pointer on the platform. The structure of these scalar objects is not exposed to C-code. The function PyArray_ScalarAsCtype (..) can be used to extract the C-type value from the array scalar and the function PyArray_Scalar (â€¦) can be used to construct an array scalar from a C-value.








